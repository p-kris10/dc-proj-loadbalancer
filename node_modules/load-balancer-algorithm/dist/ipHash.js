"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpHash = void 0;
const crypto_1 = __importDefault(require("crypto"));
const base_1 = require("./base");
// import { randomInteger } from "./util";
const NUM = 128;
class IpHash extends base_1.Base {
    reset(pool) {
        const nodeList = super.reset(pool);
        this._virtualNodes = new Map();
        if (nodeList) {
            for (const address of nodeList) {
                for (let i = 0; i < NUM / 4; i++) {
                    const digest = this._digest(`${address}${i}`);
                    for (let h = 0; h < 4; h++) {
                        // virtual nodes
                        const m = this._hash(digest, h);
                        this._virtualNodes.set(m, address);
                    }
                }
            }
        }
        this._sortKeys = Array.from(this._virtualNodes.keys()).sort((a, b) => a - b);
        return nodeList;
    }
    _hash(digest, index) {
        const f = (digest[3 + index * 4] << 24) |
            (digest[2 + index * 4] << 16) |
            (digest[1 + index * 4] << 8) |
            digest[index * 4];
        // console.log(digest[3 + index * 4], f);
        return f & 0xffffffff;
    }
    _digest(value) {
        const md5 = crypto_1.default.createHash("md5");
        return md5.update(value, "utf8").digest("hex").toString();
    }
    _selectForKey(hash) {
        const len = this._sortKeys.length;
        let key = this._sortKeys[0];
        if (this._sortKeys[len - 1] >= hash) {
            for (let i = len - 1; i >= 0; i--) {
                if (this._sortKeys[i] < hash) {
                    key = this._sortKeys[i + 1];
                    break;
                }
            }
        }
        return this._virtualNodes.get(key);
    }
    _buildKeyOfHash(args) {
        if (!args || !args.length)
            return "";
        return JSON.stringify(args[0]);
    }
    pick(args) {
        // console.log("pick", this.pool[len]);
        // const { host } = this.pool[len];
        // return "";
        const key = this._buildKeyOfHash(args);
        // console.log(Array.from(this._virtualNodes.keys()).sort());
        const digest = this._digest(key);
        // console.log(Buffer.from("hello world", "utf8").toString());
        // console.log(digest);
        // console.log(digest, this._hash(digest, 0));
        // console.log(this._selectForKey(this._hash(digest, 0)));
        // console.log("key", this._hash(digest, 0), this._sortKeys);
        // return this._selectForKey(this._hash(digest, 0));
        return {
            host: this._selectForKey(this._hash(digest, 0)),
            args
        };
    }
}
exports.IpHash = IpHash;
//# sourceMappingURL=ipHash.js.map