"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Base = void 0;
const util_1 = require("./util");
const DEFAULT_WEIGHT = 100;
class Base {
    constructor(pool, options) {
        const { defaultWeight } = options || {};
        this.defaultWeight = defaultWeight || DEFAULT_WEIGHT;
        this._pool = [];
        this.reset(pool);
    }
    reset(originalPool) {
        if (!originalPool)
            return null;
        if (typeof originalPool !== "object" || originalPool.length < 1)
            return null;
        if (this._originalPool !== originalPool) {
            const prepareData = this._transformPoolToStandard(originalPool, this.defaultWeight);
            const newPool = prepareData.pool;
            // for (const host of oldPool) {
            //   oldSet.add(host);
            // }
            // for (const host of newPool) {
            //   if (!oldSet.has(host)) {
            //     newSet.add(host);
            //   }
            // }
            // console.log("newset", newSet, this._updatePool(shuffle(newPool), newSet));
            // const prepareData = this.parse(pool);
            this._originalPool = originalPool;
            this._pool = util_1.shuffle(newPool);
            this._weightMap = prepareData.weightMap;
        }
        return this._pool;
    }
    get pool() {
        return this._pool;
    }
    get size() {
        const len = this.pool.length;
        return len ? len : 0;
    }
    get weightMap() {
        return this._weightMap;
    }
    get originalPool() {
        return this._originalPool;
    }
    _transformPoolToStandard(pool, defaultWeight) {
        if (pool.length === 0) {
            throw new Error("cannot transform a zero length pool");
        }
        const nodeList = [];
        const weightMap = new Map();
        pool.forEach((node) => {
            let realWeight;
            if (typeof node === "object") {
                const { host, weight } = node;
                nodeList.push(host);
                realWeight = weight ? weight : defaultWeight;
                weightMap.set(host, realWeight);
            }
            else {
                nodeList.push(node);
                realWeight = defaultWeight;
                weightMap.set(node, realWeight);
            }
        });
        return {
            pool: nodeList,
            weightMap,
        };
    }
    getWeight(address) {
        return this.weightMap.get(address);
    }
    pick() {
        throw new Error("abstract base class");
    }
}
exports.Base = Base;
//# sourceMappingURL=base.js.map